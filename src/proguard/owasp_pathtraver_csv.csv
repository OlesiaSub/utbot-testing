"BenchmarkTest00001","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00002","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00011","success","","true"
"BenchmarkTest00028","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00040","success","","true"
"BenchmarkTest00045","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00060","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00061","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00062","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00063","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00064","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00065","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00131","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00132","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00133","success","","true"
"BenchmarkTest00134","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00135","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00136","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00137","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest00215","success","","true"
"BenchmarkTest00216","success","","true"
"BenchmarkTest00217","fail","difficult dataflow","false"
"BenchmarkTest00218","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest00219","success","","true"
"BenchmarkTest00220","fail","difficult dataflow","false"
"BenchmarkTest00221","success",does not rely on the actual value that is picked via charAt(idx) - overapproximation,false,""
"BenchmarkTest00222","success","","true"
"BenchmarkTest00261","fail","difficult dataflow","false"
"BenchmarkTest00262","success","","true"
"BenchmarkTest00263","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00264","success","","true"
"BenchmarkTest00265","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00359","success","","true"
"BenchmarkTest00360","fail","string decoding operations","true"
"BenchmarkTest00361","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00362","success","","true"
"BenchmarkTest00363","success","","true"
"BenchmarkTest00364","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00365","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest00366","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00452","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00453","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00454","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest00455","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00456","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00457","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00458","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest00459","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest00460","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest00525","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00526","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00527","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00528","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00529","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00619","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest00620","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00621","fail","difficult dataflow","false"
"BenchmarkTest00622","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00623","fail","string decoding operations","true"
"BenchmarkTest00624","success","","true"
"BenchmarkTest00625","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest00626","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00627","fail","string decoding operations","true"
"BenchmarkTest00628","fail","difficult dataflow","false"
"BenchmarkTest00629","success","","true"
"BenchmarkTest00696","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00697","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00698","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00699","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00700","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00783","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest00784","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest00785","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest00786","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest00787","fail","string decoding operations","true"
"BenchmarkTest00788","success","","true"
"BenchmarkTest00862","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest00863","success",?,"false"
"BenchmarkTest00864","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00865","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00866","success",?,"false"
"BenchmarkTest00867","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest00949","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00950","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00951","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00952","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00953","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00954","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00955","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00956","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest00957","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest00958","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01025","success","","true"
"BenchmarkTest01026","success",difficult dataflow?,"false"
"BenchmarkTest01027","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01028","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest01029","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest01030","fail","URI creation with a tainted parameter does not taint the URI","false"
"BenchmarkTest01031","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest01032","success","","true"
"BenchmarkTest01033","success","","true"
"BenchmarkTest01034","success","","true"
"BenchmarkTest01035","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01036","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01109","success",?,"false"
"BenchmarkTest01110","fail","URI creation with a tainted parameter does not taint the URI","false"
"BenchmarkTest01111","success","","true"
"BenchmarkTest01112","success","","true"
"BenchmarkTest01113","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01114","success",?,"false"
"BenchmarkTest01115","success",?,"false"
"BenchmarkTest01116","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01117","success","","true"
"BenchmarkTest01118","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01155","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01156","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest01157","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest01158","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest01159","success",?,"false"
"BenchmarkTest01160","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01161","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01231","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest01232","success","","true"
"BenchmarkTest01233","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest01234","success","","true"
"BenchmarkTest01235","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest01236","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest01237","fail","URI creation with a tainted parameter does not taint the URI","false"
"BenchmarkTest01238","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01239","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest01240","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest01328","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest01329","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest01330","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest01331","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest01403","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01404","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01405","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01406","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01407","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01408","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01409","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01493","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01494","success","","true"
"BenchmarkTest01495","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest01496","success","","true"
"BenchmarkTest01497","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01498","success","","true"
"BenchmarkTest01499","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01500","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest01570","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01571","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01572","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01573","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01574","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01642","success","","true"
"BenchmarkTest01643","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest01644","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01645","success","","true"
"BenchmarkTest01646","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01647","success","","true"
"BenchmarkTest01744","success",?,"false"
"BenchmarkTest01745","success",??? I don't understand why it is not a vulnerability,"false"
"BenchmarkTest01746","fail","URI creation with a tainted parameter does not taint the URI","false"
"BenchmarkTest01747","fail","URI creation with a tainted parameter does not taint the URI","false"
"BenchmarkTest01748","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest01749","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01750","success",?,"false"
"BenchmarkTest01751","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest01752","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01833","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01834","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01835","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01836","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01837","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01838","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01839","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01840","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest01841","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest01904","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest01905","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01906","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01907","success","","true"
"BenchmarkTest01908","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest01983","success","","true"
"BenchmarkTest01984","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01985","fail","string decoding operations","true"
"BenchmarkTest01986","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest01987","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest01988","fail","string decoding operations","true"
"BenchmarkTest01989","success","","true"
"BenchmarkTest01990","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest01991","fail","difficult dataflow","false"
"BenchmarkTest02026","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02027","success","","true"
"BenchmarkTest02028","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest02029","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest02030","fail","difficult dataflow","false"
"BenchmarkTest02031","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02032","success","","true"
"BenchmarkTest02033","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest02034","success","","true"
"BenchmarkTest02035","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02105","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest02106","fail","string decoding operations","true"
"BenchmarkTest02107","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02108","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest02109","fail","string decoding operations","true"
"BenchmarkTest02110","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02111","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02112","success","","true"
"BenchmarkTest02113","success","","true"
"BenchmarkTest02197","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest02198","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest02199","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest02200","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02201","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02202","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02203","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02204","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02205","fail","data access from a tainted array does not make data tainted","true"
"BenchmarkTest02206","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02207","fail","data access from a tainted array does not make data tainted","false"
"BenchmarkTest02300","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02301","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02302","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02303","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02304","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02377","success","","true"
"BenchmarkTest02378","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest02379","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02380","fail","difficult dataflow","false"
"BenchmarkTest02381","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest02382","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02383","fail","addition of tainted data to a map does not taint the map","true"
"BenchmarkTest02462","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02463","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02464","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02465","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02466","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02467","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02468","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02469","fail","usage of an array as a source return does not make the array tainted","true"
"BenchmarkTest02470","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02471","fail","usage of an array as a source return does not make the array tainted","false"
"BenchmarkTest02554","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02555","fail","string decoding operations","true"
"BenchmarkTest02556","success","","true"
"BenchmarkTest02557","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02558","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02559","fail","URI creation with a tainted parameter does not taint the URI","true"
"BenchmarkTest02560","success","","true"
"BenchmarkTest02561","fail","addition of tainted data into a list does not taint the list","true"
"BenchmarkTest02562","success","","true"
"BenchmarkTest02563","fail","difficult dataflow","false"
"BenchmarkTest02564","success","","true"
"BenchmarkTest02565","fail","string decoding operations","true"
"BenchmarkTest02566","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest02567","success","","true"
"BenchmarkTest02568","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest02569","success","","true"
"BenchmarkTest02570","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02664","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest02665","success","does not rely on the actual value that is picked via charAt(idx) - overapproximation","false"
"BenchmarkTest02666","fail","addition of tainted data into a list does not taint the list","false"
"BenchmarkTest02667","success",does not rely on actual results of int calculations - overapproximation,"false"
"BenchmarkTest02668","fail","addition of tainted data to a map does not taint the map","false"
"BenchmarkTest02669","fail","addition of tainted data into a list does not taint the list","false"
